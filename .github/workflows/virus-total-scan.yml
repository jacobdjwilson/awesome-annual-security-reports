name: VirusTotal Security Scan

on:
  workflow_dispatch:
  workflow_call:
    inputs:
      pdf_file_path:
        description: 'Path to the PDF file to scan'
        required: true
        type: string
      retries:
        description: 'Number of retries'
        required: false
        type: number
        default: 0

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Scan Security Reports
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: pip install requests

      - name: Scan PDF file with VirusTotal
        env:
          VIRUS_TOTAL_API_KEY: ${{ secrets.VIRUS_TOTAL_API_KEY }}
          PDF_FILE_PATH: ${{ inputs.pdf_file_path }}
        run: |
          cat > scan.py << 'EOF'
          #!/usr/bin/env python3
          
          import os
          import sys
          import time
          import requests
          import json
          import hashlib
          import base64
          
          # Constants
          API_BASE_URL = "https://www.virustotal.com/api/v3"
          
          def calculate_file_hash(file_path):
              """Calculate SHA256 hash of a file"""
              sha256_hash = hashlib.sha256()
              with open(file_path, "rb") as f:
                  for chunk in iter(lambda: f.read(4096), b""):
                      sha256_hash.update(chunk)
              return sha256_hash.hexdigest()
          
          def scan_file(file_path, api_key):
              """Scan a file with VirusTotal and create annotation with results"""
              # Check if file exists
              if not os.path.exists(file_path):
                  print(f"Error: File not found: {file_path}")
                  return {"status": "failed", "reason": "File not found"}
              
              try:
                  # Setup API headers
                  headers = {
                      "x-apikey": api_key,
                      "User-Agent": "VirusTotal GitHub Action",
                      "Accept": "application/json"
                  }
                  
                  # Get file size (in MB) for logging
                  file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
                  file_size_bytes = os.path.getsize(file_path)
                  print(f"File: {os.path.basename(file_path)} ({file_size_mb:.2f} MB)")
                  
                  # Check file size limit (VirusTotal has a 32MB limit for free API, 650MB for premium)
                  if file_size_bytes > 32 * 1024 * 1024:
                      print(f"Warning: File size ({file_size_mb:.2f} MB) exceeds free API limit (32 MB). Skipping.")
                      return {"status": "skipped", "reason": "File size exceeds 32MB limit for free accounts"}

                  file_hash = calculate_file_hash(file_path)
                  print(f"File SHA256: {file_hash}")

                  # Retry mechanism for API calls
                  for attempt in range(3):
                      try:
                          print(f"Checking if file has been scanned before (attempt {attempt + 1}/3)...")
                          lookup_response = requests.get(
                              f"{API_BASE_URL}/files/{file_hash}",
                              headers=headers,
                              timeout=30
                          )
                          lookup_response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)
                          
                          print("File found in VirusTotal database, using existing scan results.")
                          scan_data = lookup_response.json()
                          break # Exit retry loop on success
                      except requests.exceptions.HTTPError as e:
                          if e.response.status_code == 404:
                              print("File not found in database, uploading for new scan...")
                              scan_data = None # Ensure scan_data is None to proceed with upload
                              break # Exit retry loop, 404 is not a retryable error
                          print(f"HTTP error checking file (attempt {attempt + 1}/3): {e}")
                          if attempt < 2:
                              time.sleep((2 ** attempt) * 5) # 5s, 10s
                      except requests.exceptions.RequestException as e:
                          print(f"Request error checking file (attempt {attempt + 1}/3): {e}")
                          if attempt < 2:
                              time.sleep((2 ** attempt) * 5)
                  else: # If loop completes without break
                      return {"status": "failed", "reason": "Failed to check file status after multiple retries."}

                  if scan_data is None: # File needs to be uploaded
                      for attempt in range(3):
                          try:
                              print(f"Submitting file for scan (attempt {attempt + 1}/3)...")
                              with open(file_path, 'rb') as f:
                                  files = {"file": (os.path.basename(file_path), f, "application/octet-stream")}
                                  response = requests.post(
                                      f"{API_BASE_URL}/files",
                                      headers=headers,
                                      files=files,
                                      timeout=300
                                  )
                                  response.raise_for_status()
                              
                              upload_result = response.json()
                              scan_id = upload_result.get('data', {}).get('id')
                              if not scan_id:
                                  raise ValueError("No scan ID in upload response")
                              
                              print(f"File uploaded successfully. Analysis ID: {scan_id}")
                              
                              # Wait for scan to complete
                              print("Waiting for scan to complete...")
                              wait_times = [10, 20, 30, 60, 120]
                              for poll_attempt, wait_time in enumerate(wait_times, 1):
                                  print(f"Checking scan status (poll attempt {poll_attempt}/{len(wait_times)})...")
                                  time.sleep(wait_time)
                                  status_response = requests.get(
                                      f"{API_BASE_URL}/analyses/{scan_id}",
                                      headers=headers,
                                      timeout=30
                                  )
                                  status_response.raise_for_status()
                                  
                                  analysis_result = status_response.json()
                                  status = analysis_result.get('data', {}).get('attributes', {}).get('status')
                                  
                                  if status == 'completed':
                                      print("Scan completed!")
                                      final_response = requests.get(
                                          f"{API_BASE_URL}/files/{file_hash}",
                                          headers=headers,
                                          timeout=30
                                      )
                                      final_response.raise_for_status()
                                      scan_data = final_response.json()
                                      break # Break from polling loop
                                  else:
                                      print(f"Scan status: {status}")
                              else: # If polling loop finishes without break
                                  return {"status": "failed", "reason": "Scan did not complete within timeout period"}
                              
                              break # Break from upload retry loop
                          except (requests.exceptions.RequestException, ValueError) as e:
                              print(f"Error during file upload/scan (attempt {attempt + 1}/3): {e}")
                              if attempt < 2:
                                  time.sleep((2 ** attempt) * 10) # 10s, 20s
                      else: # If upload retry loop finishes without break
                          return {"status": "failed", "reason": "Failed to upload and scan file after multiple retries."}
                  
                  # Process scan results
                  attributes = scan_data.get('data', {}).get('attributes', {})
                  stats = attributes.get('last_analysis_stats', {})
                  results = attributes.get('last_analysis_results', {})
                  
                  # Calculate threat metrics
                  malicious_count = stats.get('malicious', 0)
                  suspicious_count = stats.get('suspicious', 0)
                  total_engines = sum(stats.values())
                  
                  # Determine verdict
                  if malicious_count > 0:
                      verdict = "Malicious"
                      threat_score = min(90, (malicious_count / max(total_engines, 1)) * 100)
                  elif suspicious_count > 0:
                      verdict = "Suspicious"
                      threat_score = min(60, (suspicious_count / max(total_engines, 1)) * 100)
                  else:
                      verdict = "Clean"
                      threat_score = 0
                  
                  # Get detection details
                  detections = []
                  for engine_name, engine_result in results.items():
                      if engine_result.get('category') in ['malicious', 'suspicious']:
                          engine_verdict = engine_result.get('result', 'Unknown')
                          detections.append(f"{engine_name}: {engine_verdict}")
                  
                  # Get report URL
                  report_url = f"https://www.virustotal.com/gui/file/{file_hash}"
                  
                  # Output results
                  print(f"Scan Results:")
                  print(f"- Verdict: {verdict}")
                  print(f"- Threat Score: {threat_score}/100")
                  print(f"- Malicious detections: {malicious_count}/{total_engines}")
                  print(f"- Suspicious detections: {suspicious_count}/{total_engines}")
                  
                  if detections:
                      print(f"- Detections: {', '.join(detections[:5])}")  # Limit to first 5
                      if len(detections) > 5:
                          print(f"  ... and {len(detections) - 5} more")
                  
                  # Create annotation
                  create_annotation(file_path, verdict, threat_score, malicious_count, suspicious_count, total_engines, report_url)
                  
                  return {
                      "status": "success",
                      "file": os.path.basename(file_path),
                      "verdict": verdict,
                      "threat_score": threat_score,
                      "malicious_count": malicious_count,
                      "suspicious_count": suspicious_count,
                      "total_engines": total_engines,
                      "report_url": report_url,
                      "sha256": file_hash,
                      "detections": detections
                  }
                  
              except Exception as e:
                  print(f"Error scanning file: {str(e)}")
                  import traceback
                  traceback.print_exc()
                  return {"status": "failed", "reason": f"Exception during scan: {str(e)}"}
          
          def create_annotation(file_path, verdict, threat_score, malicious_count, suspicious_count, total_engines, report_url):
              """Create GitHub annotation with scan results"""
              # Determine annotation level and icon
              if verdict.lower() == "malicious":
                  level = "error"
                  icon = "🔴"
              elif verdict.lower() == "suspicious":
                  level = "warning"
                  icon = "🟠"
              else:
                  level = "notice"
                  icon = "✅"
              
              # Format annotation text
              detection_summary = f"{malicious_count + suspicious_count}/{total_engines} engines"
              message = f"VirusTotal Scan: {verdict} {icon} ({detection_summary})"
              
              # Create GitHub annotations
              print(f"::{level} file={file_path}::{message}")
              print(f"::{level} file={file_path}::Report: {report_url}")
              
              return True
          
          def main():
              # Get API key
              api_key = os.environ.get('VIRUS_TOTAL_API_KEY')
              if not api_key:
                  print("Error: VIRUS_TOTAL_API_KEY environment variable not set")
                  return 1
              
              # Get file to scan from environment
              file_to_scan = os.environ.get('PDF_FILE_PATH', '').strip()
              if not file_to_scan:
                  print("No PDF file path provided.")
                  return 0
              
              print(f"Processing {file_to_scan} for scan.")
              
              # Initialize summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'w') as f:
                  f.write("## 🛡️ VirusTotal Security Scan Results\n\n")
              
              # Process the file
              result = scan_file(file_to_scan, api_key)
              
              # Write detailed results to summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'a') as f:
                  if result and result["status"] == "success":
                      f.write("| File | Verdict | Detections | Engines | Report |\n")
                      f.write("|------|---------|------------|---------|--------|\n")
                      
                      # Set icon based on verdict
                      icon = ""
                      verdict = result["verdict"]
                      
                      if "malicious" in verdict.lower():
                          icon = "🔴 "
                      elif "suspicious" in verdict.lower():
                          icon = "🟠 "
                      else:
                          icon = "✅ "
                      
                      # Format detection summary
                      detection_count = result["malicious_count"] + result["suspicious_count"]
                      detection_summary = f"{detection_count}/{result['total_engines']}"
                      
                      # Format top detections
                      detections = result.get("detections", [])
                      if detections:
                          top_detections = ", ".join([d.split(":")[0] for d in detections[:3]])
                          if len(detections) > 3:
                              top_detections += f" (+{len(detections) - 3} more)"
                      else:
                          top_detections = "None"
                      
                      f.write(f"| {result['file']} | {icon}{verdict} | {top_detections} | {detection_summary} | [View Report]({result['report_url']}) |\n")
                  else:
                      f.write("File was not successfully scanned.\n")
                      if result:
                          f.write(f"Reason: {result.get('reason', 'Unknown')}\n")

                  # Add additional info about VirusTotal
                  f.write("\n### About the Scan\n")
                  f.write("- Files are scanned using the VirusTotal API v3\n")
                  f.write("- Results are based on analysis from 70+ antivirus engines\n")
                  f.write("- Files already in the VirusTotal database use existing scan results\n")
                  f.write("- Visit the report links for complete analysis details\n")
                  
                  # Add rate limit info
                  f.write("\n### API Usage\n")
                  f.write("- This scan uses the VirusTotal public API\n")
                  f.write("- Rate limits: 4 requests per minute for free accounts\n")
              
              return 0 if result and result["status"] == "success" else 1
          
          if __name__ == "__main__":
              sys.exit(main())
          EOF
          
          # Make script executable and run
          chmod +x scan.py
          python scan.py || echo "Scan completed with some issues, but continuing workflow"
