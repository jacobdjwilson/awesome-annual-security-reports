name: Security Reports Processing Pipeline

on:
  push:
    branches: [main, development]
    paths:
      - 'Annual Security Reports/**/*.pdf'
  pull_request:
    branches: [main, development]
    paths:
      - 'Annual Security Reports/**/*.pdf'
  workflow_dispatch:
    inputs:
      force_scan_all:
        description: 'Force scan all PDF files (not just changed)'
        required: false
        default: 'false'
        type: boolean
      skip_virus_scan:
        description: 'Skip VirusTotal scanning'
        required: false
        default: 'false'
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  # Step 1: Discovery and Security Scan
  discover-and-scan:
    runs-on: ubuntu-latest
    outputs:
      files_to_process: ${{ steps.find-files.outputs.files_to_process }}
      has_files: ${{ steps.find-files.outputs.has_files }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find changed PDF files
        id: find-files
        run: |
          if [[ "${{ github.event.inputs.force_scan_all }}" == "true" ]]; then
            find "Annual Security Reports" -name "*.pdf" > files_to_process.txt
            touch deleted_files.txt
          else
            git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.event.after }} | grep 'Annual Security Reports/.*\.pdf$' > files_to_process.txt || true
            git diff --name-only --diff-filter=D ${{ github.event.before }} ${{ github.event.after }} | grep 'Annual Security Reports/.*\.pdf$' > deleted_files.txt || true
          fi
          
          if [ -s files_to_process.txt ]; then
            files_content=$(cat files_to_process.txt | sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | grep -v '^$')
            json_array="["
            first_item=true
            while IFS= read -r line; do
              line=$(echo "$line" | sed 's/,$//')
              if [ "$first_item" = false ]; then
                json_array+=,
              fi
              json_array+="\"$line\""
              first_item=false
            done <<< "$files_content"
            json_array+="]"
            echo "files_to_process=$json_array" >> $GITHUB_OUTPUT
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            echo "files_to_process=[]" >> $GITHUB_OUTPUT
            echo "has_files=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Discovery Summary
        run: |
          echo "## 📊 Discovery Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Report Counts" >> $GITHUB_STEP_SUMMARY
          echo "| Directory | PDF Reports | Markdown Conversions |" >> $GITHUB_STEP_SUMMARY
          echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY
          for year_dir in Annual\ Security\ Reports/*/; do
            if [ -d "$year_dir" ]; then
              year=$(basename "$year_dir")
              pdf_count=$(find "$year_dir" -name "*.pdf" -type f | wc -l)
              md_path="Markdown Conversions/$year"
              if [ -d "$md_path" ]; then
                md_count=$(find "$md_path" -name "*.md" -type f | wc -l)
              else
                md_count=0
              fi
              echo "| $year | $pdf_count | $md_count |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### New/Modified Files Found" >> $GITHUB_STEP_SUMMARY
          if [ -s files_to_process.txt ]; then
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat files_to_process.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "No new or modified PDF files found." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Setup Python Environment
        if: steps.find-files.outputs.has_files == 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        if: steps.find-files.outputs.has_files == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Run VirusTotal Scan
        if: steps.find-files.outputs.has_files == 'true' && github.event.inputs.skip_virus_scan != 'true'
        env:
          VIRUS_TOTAL_API_KEY: ${{ secrets.VIRUS_TOTAL_API_KEY }}
        run: |
          python .github/scripts/virus-total-scan.py files_to_process.txt --deleted-files deleted_files.txt --output-json scan_results.json

      - name: Upload files to process
        if: steps.find-files.outputs.has_files == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: files-to-process
          path: files_to_process.txt

      - name: Upload scan results
        if: steps.find-files.outputs.has_files == 'true' && github.event.inputs.skip_virus_scan != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: scan-results
          path: scan_results.json

  # Step 2: PDF to Markdown Conversion (Matrix Job)
  convert-pdf-to-markdown:
    runs-on: ubuntu-latest
    needs: discover-and-scan
    if: needs.discover-and-scan.outputs.has_files == 'true'
    strategy:
      matrix:
        pdf_file: ${{ fromJson(needs.discover-and-scan.outputs.files_to_process) }}
      fail-fast: false
    outputs:
      conversion_results: ${{ steps.convert.outputs.result }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install markitdown[pdf] google-generativeai google-api-python-client

      - name: Run PDF Converter
        id: convert
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_SEARCH_API_KEY: ${{ secrets.GOOGLE_SEARCH_API_KEY }}
          GOOGLE_CSE_ID: ${{ secrets.GOOGLE_CSE_ID }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PDF_FILE="${{ matrix.pdf_file }}"
          PROMPT_PATH=".github/ai-prompts/pdf-to-markdown-prompt.md"
          PROMPT_VERSION=$(git log -n 1 --pretty=format:%s -- $PROMPT_PATH | grep -oP 'v\d+\.\d+(\.\d+)?' || echo 'v1.0')
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          echo "$PDF_FILE" > single_pdf_file.txt
          python .github/scripts/pdf-converter.py single_pdf_file.txt $PROMPT_PATH $PROMPT_VERSION $BRANCH_NAME --output-json conversions.json
          
          # Create a unique artifact name for this file
          FILE_HASH=$(echo "$PDF_FILE" | sha256sum | cut -d' ' -f1 | cut -c1-8)
          echo "file_hash=$FILE_HASH" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Upload conversion results
        uses: actions/upload-artifact@v4
        with:
          name: conversion-results-${{ steps.convert.outputs.file_hash }}
          path: conversions.json

  # Step 3: Report Analysis (Matrix Job)
  analyze-reports:
    runs-on: ubuntu-latest
    needs: [discover-and-scan, convert-pdf-to-markdown]
    if: needs.discover-and-scan.outputs.has_files == 'true'
    strategy:
      matrix:
        pdf_file: ${{ fromJson(needs.discover-and-scan.outputs.files_to_process) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai

      - name: Generate file hash
        id: hash
        run: |
          FILE_HASH=$(echo "${{ matrix.pdf_file }}" | sha256sum | cut -d' ' -f1 | cut -c1-8)
          echo "file_hash=$FILE_HASH" >> $GITHUB_OUTPUT

      - name: Download conversion results
        uses: actions/download-artifact@v4
        with:
          name: conversion-results-${{ steps.hash.outputs.file_hash }}
          path: .

      - name: Run Report Analyzer
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          python .github/scripts/report-analyzer.py conversions.json --readme-path README.md --output-json analysis.json
        continue-on-error: true

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: analysis-results-${{ steps.hash.outputs.file_hash }}
          path: analysis.json

  # Step 4: Update README
  update-readme:
    runs-on: ubuntu-latest
    needs: [discover-and-scan, convert-pdf-to-markdown, analyze-reports]
    if: always() && needs.discover-and-scan.outputs.has_files == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python Environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai

      - name: Download all analysis results
        uses: actions/download-artifact@v4
        with:
          pattern: analysis-results-*
          path: analysis-artifacts
          merge-multiple: true

      - name: Combine analysis results
        id: combine_analysis
        run: |
          mkdir -p combined_analysis
          echo "[]" > combined_analysis/all_analysis.json
          
          # Find and combine all analysis.json files
          find analysis-artifacts -name "analysis.json" -type f | while read -r file; do
            if [ -s "$file" ] && jq -e . >/dev/null 2>&1 <"$file"; then
              jq -s '.[0] + .[1]' combined_analysis/all_analysis.json "$file" > temp.json && mv temp.json combined_analysis/all_analysis.json
            fi
          done
          
          if [ ! -s combined_analysis/all_analysis.json ] || [ "$(jq 'length' combined_analysis/all_analysis.json)" -eq 0 ]; then
            echo "combined_analysis_exists=false" >> $GITHUB_OUTPUT
          else
            echo "combined_analysis_exists=true" >> $GITHUB_OUTPUT
          fi

      - name: Run README Updater
        if: steps.combine_analysis.outputs.combined_analysis_exists == 'true'
        run: |
          python .github/scripts/readme-updater.py combined_analysis/all_analysis.json --readme-path README.md

      - name: Generate README Update Summary
        run: |
          echo "## ✏️ README Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.combine_analysis.outputs.combined_analysis_exists }}" == "true" ] && [ -f combined_analysis/all_analysis.json ]; then
            echo "| Markdown Entry | Type | Action |" >> $GITHUB_STEP_SUMMARY
            echo "|---|---|---|" >> $GITHUB_STEP_SUMMARY
            jq -r '.[] | "| \(.title // .file_path) | \(.type // "N/A") | Updated |"' combined_analysis/all_analysis.json >> $GITHUB_STEP_SUMMARY
          else
            echo "No updates were made to the README.md." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Commit and Push Changes
        if: steps.combine_analysis.outputs.combined_analysis_exists == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update repository with latest security reports and markdown conversions"
            git push
          fi

  # Step 5: Generate Final Summary
  generate-summary:
    runs-on: ubuntu-latest
    needs: [discover-and-scan, convert-pdf-to-markdown, analyze-reports, update-readme]
    if: always() && needs.discover-and-scan.outputs.has_files == 'true'
    steps:
      - name: Download scan results
        if: github.event.inputs.skip_virus_scan != 'true'
        uses: actions/download-artifact@v4
        with:
          name: scan-results
          path: .
        continue-on-error: true

      - name: Download all conversion results
        uses: actions/download-artifact@v4
        with:
          pattern: conversion-results-*
          path: conversion-artifacts
          merge-multiple: true
        continue-on-error: true

      - name: Download all analysis results
        uses: actions/download-artifact@v4
        with:
          pattern: analysis-results-*
          path: analysis-artifacts
          merge-multiple: true
        continue-on-error: true

      - name: Generate Pipeline Summary
        run: |
          echo "## 🔄 Security Reports Processing Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.head_ref || github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # VirusTotal Results
          if [ -f scan_results.json ]; then
            echo "### 🛡️ VirusTotal Security Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| File | Verdict | Detections | Engines | Report |" >> $GITHUB_STEP_SUMMARY
            echo "|------|---------|------------|---------|--------|" >> $GITHUB_STEP_SUMMARY
            jq -r '.[] | select(.status == "success") | "| \(.file) | \(if .verdict == "Clean" then "✅" elif .verdict == "Suspicious" then "🟡" else "🔴" end) \(.verdict) | \(.malicious_count + .suspicious_count)/\(.total_engines) | \(.total_engines) | [View Report](\(.report_url)) |"' scan_results.json >> $GITHUB_STEP_SUMMARY 2>/dev/null || echo "No scan results available." >> $GITHUB_STEP_SUMMARY
          fi
          
          # Conversion Results
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⚙️ PDF to Markdown Conversion Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| PDF File | Markdown Output | Model Used | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-----------------|------------|--------|" >> $GITHUB_STEP_SUMMARY
          find conversion-artifacts -name "conversions.json" -type f | while read -r file; do
            if [ -s "$file" ]; then
              jq -r '.[] | "| \(.pdf_path) | \(.output_path // "N/A") | \(.model_used // "N/A") | \(if .status == "success" then "✅" else "❌" end) \(.status) |"' "$file" >> $GITHUB_STEP_SUMMARY 2>/dev/null
            fi
          done
          
          # Analysis Results
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Report Analysis Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| File | Category | Type | AI Processed |" >> $GITHUB_STEP_SUMMARY
          echo "|------|----------|------|--------------|" >> $GITHUB_STEP_SUMMARY
          find analysis-artifacts -name "analysis.json" -type f | while read -r file; do
            if [ -s "$file" ]; then
              jq -r '.[] | "| \(.file_path // .title // "N/A") | \(.category // "N/A") | \(.type // "N/A") | \(if .ai_processed then "✅" else "⚠️" end) |"' "$file" >> $GITHUB_STEP_SUMMARY 2>/dev/null
            fi
          done